
Network Working Group                                            B. Cros
Request for Commments: 0000                                   C. Herbecq
Updates: 1350                            Picardie Jules Verne University
			                                      March 2024


                         TFTP BigFile Option

Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.


Abstract

   This document proposes an extension to the TFTP (Trivial File Transfer 
   Protocol) to allow for the transfer of large files, exceeding the 
   typically allowed maximum size in TFTP. The extension introduces a 
   new option called "bigfile" to negotiate and efficiently manage the
   transfer of large files. This document describes a TFTP option which
   allows the client and server to transfer files that are exceeding 2¹⁶
   blocks. 
   
Introduction

   The Trivial File Transfer Protocol (TFTP) is a lightweight file transfer
   protocol widely used for file transfer operations in network environments. 
   However, one of its major limitations is its ability to handle large files, 
   often exceeding the maximum size allowed in TFTP. To address this 
   limitation, an extension called "bigfile" is proposed to enable efficient 
   transfer of large files.

   This extension aims to extend the capabilities of TFTP by introducing a new 
   option, "bigfile", which facilitates negotiation and efficient management of 
   large file transfers. Unlike the size restrictions typically imposed by TFTP, 
   this extension allows for the transfer of files exceeding 2¹⁶ blocks, 
   providing a solution for cases where large files need to be reliably and 
   efficiently transferred.   

BigFile Option Specification

   The TFTP Read Request or Write Request packet is modified to include
   the blocksize option as follows.  Note that all fields except "opc"
   are NULL-terminated.

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      |  opc  |filename| 0 |  mode  | 0 | bigfile| 0 | bigOpt | 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+

      opc
         The opcode field contains either a 1, for Read Requests, or 2,
         for Write Requests.

      filename
         The name of the file to be read or written.

      mode
         The mode of the file transfer: "netascii", "octet", or "mail".

      bigfile
         The BigFile option (it is case sensitive).

      bigOpt
      	 It is a string containing either "1" or "0". String "0" meaning
         that the BigFile option is not active and "1" meaning that it is
         active.
         
    For example :
    
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      |   2   |filename| 0 | octet  | 0 | bigfile| 0 |   1    | 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      
      This Write Request is using bigfile because we use the correct
      bigOpt "1".

      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+
      |   2   |filename| 0 | octet  | 0 | bigfile| 0 |   0    | 0 |
      +-------+---~~---+---+---~~---+---+---~~---+---+---~~---+---+

      This one in the other hand means that BigFile option is not 
      active.
      
BigFile Option Explanation

   The bigfile option works on the modulo principle. If the "Block #" field
   of the DATA packet is 2^n bytes long then we will modulo it when it 
   reaches the value 2^n-1.
   
      If n=2, then "Block #" will have a range of (1, 3).
   
   		Block # 1  -->  2  -->  3  -->  0 ...
			^       ^       ^       ^
			|       |       |       |
			|       |       |       |
                	+-------+-------+-------+ ...
	      	      1 % 4   2 % 4   3 % 4   4 % 4
	      	      
   Next here is an explanation of how the comunication works between server
   and client using BigFile TFTP option :
   
   For this example, let's also consider that n=2.
   
   Read Request

      client                                           server
      -------------------------------------------------------
      |1|foofile|0|octet|0|bigfile|0|1|0|  -->                  RRQ
                                       <--  |6|bigfile|0|1|0|   OACK
      |4|0|  -->                                                ACK
                              <--  |3|1| 512 octets of data |   DATA
      |4|1|  -->                                                ACK
                              <--  |3|2| 512 octets of data |   DATA
      |4|2|  -->                                                ACK
                              <--  |3|3| 512 octets of data |   DATA
      |4|3|  --> 						ACK
                              <--  |3|0|<512 octets of data |   DATA
      |4|0|  -->                                                ACK

   Write Request

      client                                           server
      -------------------------------------------------------
      |2|barfile|0|octet|0|bigfile|0|1|0|  -->                  RRQ
                                       <--  |6|bigfile|0|1|0|   OACK
      |3|1| 512 octets of data |  -->                           DATA
                                                   <--  |4|1|   ACK
      |3|2| 512 octets of data |  -->                           DATA
                                                   <--  |4|2|   ACK
      |3|3| 512 octets of data |  -->                           DATA
                                                   <--  |4|3|   ACK
      |3|0|<512 octets of data |  -->                           DATA
                                                   <--  |4|0|   ACK
	      	      
	      	      
BigFile option compatibility

   The current compatibility between clients and servers within the TFTP 
   ecosystem is hindered by the absence of implementation for the BigFile 
   option. As this option is a new addition proposed for extending the TFTP 
   protocol, existing clients and servers may not support it out of the box.
   Consequently, file transfers involving the BigFile option may encounter 
   compatibility issues when attempting to communicate with non-compliant 
   counterparts.
    
   However, it's worth noting that the BigFile option is designed to be 
   compatible with the existing blksize option. The blksize option allows 
   negotiation of the block size used in data transmission during TFTP 
   operations. 

Security Considerations

   The basic TFTP protocol has no security mechanism.  This is why it
   has no rename, delete, or file overwrite capabilities.  This document
   does not add any security to TFTP. However, the specified extensions
   do not add any additional security risks.

References

   [1] Sollins, K., "The TFTP Protocol (Revision 2)", STD 33, RFC 1350,
       October 1992.

   [2] Malkin, G., and A. Harkin, "TFTP Option Extension", RFC 2347,
       May 1998.
